{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.0.3 (2020-10-10) -- \"Bunny-Wunnies Freak Out\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: i386-w64-mingw32/i386 (32-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Compositional)",
        "> ",
        "alef",
        "function(x, a) {\n\n  x <- as.matrix(x)\n  D <- dim(x)[2]  \n  if ( D == 1 ) x = t(x)\n  D <- dim(x)[2] ## number of components\n\n  if ( abs(a) < 1e-9 )  {  ## if alpha is almost zero make it zero\n    xa <- log(x)\n    aff <- xa - Rfast::rowmeans(xa) \n    res <- list(aff = aff) \n  } else {  \n    sk <- Rfast::rowsums(x^a)\n    aff <- D / a * x^a / sk - 1/a  \n    res <- list(sk = sk, aff = aff) \n  }\n\n  res\n}\n<bytecode: 0x24d80cb0>\n<environment: namespace:Compositional>\n",
        "> ",
        "rfolded",
        "function(n, mu, su, a) {\n\n  z <- Rfast::rmvnorm(n, mu, su)\n  D <- dim(z)[2]\n  z1 <- z %*% helm(D + 1)\n  mi <- abs(a) * Rfast::rowMins(z1, value = TRUE)\n  ina <- which(mi <  - 1)\n  if ( length(ina) > 0 ) {\n    p <- 1 / abs( mi[ina] )\n    w <- p^2 * z1[ina, ]\n    x1 <- rbind( z1[-ina, ], w )\n  } else  x1 <- z1\n\n  if ( abs(a) < 1e-9 )  {  ## if alpha is almost zero make it zero\n    z <- exp(x1)\n  } else  z <- (a * x1 + 1) ^ (1/a)\n    z <- z / Rfast::rowsums(z)\n  \n  z\n}\n<bytecode: 0x251178a0>\n<environment: namespace:Compositional>\n",
        "> ",
        "dfd",
        "function(x, alpha, prob, tau){\n  FlexDir::FD.density(x = x, a = alpha, p = prob, t = tau)\n}\n<bytecode: 0x2706e630>\n<environment: namespace:Compositional>\n",
        "> ",
        "?dfd",
        "> ",
        " ?rfolded",
        "> ",
        "?dfd",
        "> ",
        "s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,",
        "+ ",
        "        1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,",
        "+ ",
        "        0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,",
        "+ ",
        "        0.0611442781)",
        "> ",
        "s <- matrix(s, ncol = 4)",
        "> ",
        "m <- c(1.715, 0.914, 0.115, 0.167)",
        "> ",
        "x <- rfolded(100, m, s, 0.5)",
        "> ",
        "mod <- a.est(x)",
        "> ",
        "mod",
        "$runtime\n   user  system elapsed \n   0.01    0.00    0.02 \n\n$best\n[1] 0.5018047\n\n$loglik\n[1] 1133.792\n\n$p\n[1] 0.8316294\n\n$mu\n[1] 1.6825333 1.0155325 0.1183472 0.1674615\n\n$su\n            [,1]        [,2]        [,3]        [,4]\n[1,]  0.14807505 -0.45268507  0.02079515 -0.02909953\n[2,] -0.45268507  1.49318671 -0.05336592  0.07776368\n[3,]  0.02079515 -0.05336592  0.03387463 -0.04326031\n[4,] -0.02909953  0.07776368 -0.04326031  0.05556036\n\n",
        "> ",
        "a.est",
        "function(x) {\n  ## x contains compositional data\n   runtime <- proc.time()\n   opt <- optimize( a.mle, c(-1, 1), x = x, maximum = TRUE )\n   best <- opt$maximum\n   mod <- Compositional::alpha.mle(x, best)\n   runtime <- proc.time() - runtime\n   list(runtime = runtime, best = best, loglik = mod$loglik,\n        p = mod$p, mu = mod$mu, su = mod$su)\n}\n<bytecode: 0x273d7ef8>\n<environment: namespace:Compositional>\n",
        "> ",
        "alpha.mle(x)",
        "Error in alpha.mle(x) : argument \"a\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        "alpha.mle",
        "function(x, a) {\n  ## x is the compositional data\n  ## a is the value of the alpha parameter\n  dm <- dim(x)\n  n <- dm[1]  ;  D <- dm[2]  ## dimensions of x\n  d <- D - 1  ## dimensionality of the simplex\n  ja <- sum( Rfast::Log(x) )  ## part of the Jacobian determinant\n  #########\n  if ( abs(a) < 1e-9 ) {  ## i.e. if alpha = 0\n    mod <- alfa(x, 0)\n    aff <- mod$aff\n    su <- Rfast::cova(aff)\n    con <-  - n/2 * d * log(2 * pi * (n - 1)/n ) - (n - 1) * d/2 + n * (d + 0.5) * log(D)\n    lik <-  - n/2 * log( abs( det( cov(aff) ) ) ) - ja - D * mod$sa + con\n",
        "    result <- list(loglik = lik, mu = Rfast::colmeans(aff), su = su)\n\n  } else {\n    mod <- alef(x, a)\n    y <- mod$aff\n    sk <- mod$sk\n    lam <- 1 /(a^2 * Rfast::rowMins(y, value = TRUE)^2)   ##  1 / apply(a * y, 1, min)^2\n    y1 <- y %*% t( helm(D) )\n    y2 <- y1 * lam\n    lamd <- lam^d\n    ma <- Rfast::colmeans(y1)\n    sa <- Rfast::cova(y1)\n    com <-  - 0.5 * n * d * log(2 * pi ) + n * (d + 0.5) * log(D) + (a - 1) * ja - D * sum( log(sk) )\n    ## step 1\n    con <-  - 0.5 * n * log( det(sa) )\n    f1 <- exp( -0.5 * Rfast::mahala(y1, ma, sa) )\n",
        "    f2 <- lamd * exp(-0.5 * Rfast::mahala(y2, ma, sa) )\n    p <- f1 / (f1 + f2)\n    per <- sum(p) / n\n    ela1 <- sum( log(per * f1 + (1 - per) * f2) ) + con\n    ## step 2\n    ma <- colMeans(p * y1 + (1 - p) * y2, na.rm = TRUE)\n    z1 <- sqrt(p) * Rfast::eachrow(y1, ma, oper = \"-\")       ## ( y1 - rep(ma, rep(n, d)) )\n\tz2 <- sqrt(1 - p) * Rfast::eachrow(y2, ma, oper = \"-\")   ## ( y2 - rep( ma, rep(n, d) ) )\n    sa <- ( crossprod(z1) + crossprod(z2) )/n\n    con <-  - 0.5 * n * log( det(sa) )\n    f1 <- exp( -0.5 * Rfast::mahala(y1, ma, sa) )\n",
        "    f2 <- lamd * exp( -0.5 * Rfast::mahala(y2, ma, sa) )\n    p <- f1 / (f1 + f2)\n    per <- sum(p) / n\n    ela2 <- sum( log(per * f1 + (1 - per) * f2) ) + con\n    ## step 3 and beyond\n    k <- 2\n    while ( abs(ela2 - ela1) > 1e-06 ) {\n     k <- k + 1\n     ela1 <- ela2\n     ma <- colMeans(p * y1 + (1 - p) * y2, na.rm = TRUE)\n     z1 <- sqrt(p) * Rfast::eachrow(y1, ma, oper = \"-\")       ## ( y1 - rep(ma, rep(n, d)) )\n\t z2 <- sqrt(1 - p) * Rfast::eachrow(y2, ma, oper = \"-\")   ## ( y2 - rep( ma, rep(n, d) ) )\n",
        "     sa <- ( crossprod(z1) + crossprod(z2) )/n\n     con <-  - 0.5 * n * log( det(sa) )\n     f1 <- exp( -0.5 * Rfast::mahala(y1, ma, sa) )\n     f2 <- lamd * exp(-0.5 * Rfast::mahala(y2, ma, sa) )\n     p <- f1 / (f1 + f2)\n     per <- sum(p) / n\n     ela2 <- sum( log(per * f1 + (1 - per) * f2) ) + con\n    }\n   result <- list(iters = k, p = per, loglik = ela2 + com + 0.5 * d, mu = ma, su = sa)\n   }\n   result\n}\n<bytecode: 0x18b9edc0>\n<environment: namespace:Compositional>\n",
        "> ",
        "a.est(x)",
        "$runtime\n   user  system elapsed \n   0.02    0.00    0.01 \n\n$best\n[1] 0.5018047\n\n$loglik\n[1] 1133.792\n\n$p\n[1] 0.8316294\n\n$mu\n[1] 1.6825333 1.0155325 0.1183472 0.1674615\n\n$su\n            [,1]        [,2]        [,3]        [,4]\n[1,]  0.14807505 -0.45268507  0.02079515 -0.02909953\n[2,] -0.45268507  1.49318671 -0.05336592  0.07776368\n[3,]  0.02079515 -0.05336592  0.03387463 -0.04326031\n[4,] -0.02909953  0.07776368 -0.04326031  0.05556036\n\n",
        "> ",
        "",
        "> ",
        "s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,",
        "+ ",
        "        1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,",
        "+ ",
        "        0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,",
        "+ ",
        "        0.0611442781)",
        "> ",
        "s <- matrix(s, ncol = 4)",
        "> ",
        "m <- c(1.715, 0.914, 0.115, 0.167)",
        "> ",
        "x <- rfolded(100, m, s, 0.5)",
        "> ",
        "mod <- a.est(x)",
        "> ",
        "den <- dfolded(x, mod$best, mod$p, mod$mu, mod$su)",
        "Error in dfolded(x, mod$best, mod$p, mod$mu, mod$su) : \n  could not find function \"dfolded\"\n",
        "> ",
        "source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/dfolded.R')",
        "> ",
        "s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,",
        "+ ",
        "        1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,",
        "+ ",
        "        0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,",
        "+ ",
        "        0.0611442781)",
        "> ",
        "s <- matrix(s, ncol = 4)",
        "> ",
        "m <- c(1.715, 0.914, 0.115, 0.167)",
        "> ",
        "x <- rfolded(100, m, s, 0.5)",
        "> ",
        "mod <- a.est(x)",
        "> ",
        "den <- dfolded(x, mod$best, mod$p, mod$mu, mod$su)",
        "Error in z1 %*% h : requires numeric/complex matrix/vector arguments\n",
        "> ",
        "source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/dfolded.R')",
        "> ",
        "s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,",
        "+ ",
        "        1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,",
        "+ ",
        "        0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,",
        "+ ",
        "        0.0611442781)",
        "> ",
        "s <- matrix(s, ncol = 4)",
        "> ",
        "m <- c(1.715, 0.914, 0.115, 0.167)",
        "> ",
        "x <- rfolded(100, m, s, 0.5)",
        "> ",
        "mod <- a.est(x)",
        "> ",
        "den <- dfolded(x, mod$best, mod$p, mod$mu, mod$su)",
        "Error in Rfast::mahala(y2, mu, su) : \n  The number of columns of X is different from the dimension of the covariance matrix.\n",
        "> ",
        "mu",
        "Error: object 'mu' not found\n",
        "> ",
        "mod$mu",
        "[1] 1.7023836 0.9145566 0.1254215 0.1623783\n",
        "> ",
        "mod$su",
        "             [,1]        [,2]         [,3]        [,4]\n[1,]  0.130544575 -0.39782552  0.007233832 -0.01029726\n[2,] -0.397825521  1.31941679 -0.012664429  0.02131536\n[3,]  0.007233832 -0.01266443  0.041032037 -0.05225824\n[4,] -0.010297264  0.02131536 -0.052258243  0.06684068\n",
        "> ",
        " d <- dim(x)[2] - 1",
        "> ",
        "  h <- t( helm(d + 1) )",
        "> ",
        "  down <- sqrt( det( 2 * pi * s) )",
        "> ",
        "",
        "> ",
        "  z1 <- Compositional::alef(x, a)$aff",
        "Error in Compositional::alef(x, a) : object 'a' not found\n",
        "> ",
        "z1",
        "Error: object 'z1' not found\n",
        "> ",
        "a=mod$a",
        "> ",
        "a",
        "NULL\n",
        "> ",
        "mod$besrt",
        "NULL\n",
        "> ",
        "mod$best",
        "[1] 0.5066974\n",
        "> ",
        "a=mod$best",
        "> ",
        " d <- dim(x)[2] - 1",
        "> ",
        "  h <- t( helm(d + 1) )",
        "> ",
        "  down <- sqrt( det( 2 * pi * s) )",
        "> ",
        "",
        "> ",
        "  z1 <- Compositional::alef(x, a)$aff",
        "> ",
        "z1",
        "            [,1]        [,2]         [,3]         [,4]          [,5]\n  [1,] 1.7333977 -0.61730803 -0.903381289 -0.402385770  0.1896773651\n  [2,] 1.5442250 -1.09103126 -0.243709163  0.278356107 -0.4878406496\n  [3,] 1.3186390 -1.37418293  0.257411198  0.085632300 -0.2874995570\n  [4,] 1.6364900 -1.15586149 -0.249942745 -0.297844590  0.0671588564\n  [5,] 1.5322846 -1.01889794 -0.309568545 -0.270435783  0.0666176824\n  [6,] 1.7957200 -0.22474690 -1.364250092  0.168603842 -0.3753268161\n  [7,] 1.4971053 -1.51641117  0.244255531",
        " -0.086770629 -0.1381790208\n  [8,] 1.6281709 -0.92190496 -0.486933893 -0.336770888  0.1174388379\n  [9,] 1.6773609 -0.69891068 -0.765969948 -0.134207947 -0.0782723257\n [10,] 1.5794450 -0.58161023 -0.778600046 -0.065536009 -0.1536987590\n [11,] 1.5249330 -0.99261017 -0.317243006 -0.364515913  0.1494361405\n [12,] 1.5559457 -1.08189429 -0.261951256  0.328671060 -0.5407712589\n [13,] 1.5435969 -0.71457039 -0.619501261  0.014586197 -0.2241114015\n [14,] 1.4844631 -1.01760756 -0.245681851 -0.058167520 -0.1630062032\n [15,]",
        " 1.8512363 -0.30109148 -1.338149545 -0.451425774  0.2394304828\n [16,] 1.7644889 -0.06419538 -1.471409889 -0.321412880  0.0925292388\n [17,] 1.6477965 -0.81624408 -0.607159840 -0.306160235  0.0817676711\n [18,] 2.0002855  0.08576810 -1.859701140 -0.081953625 -0.1443987853\n [19,] 1.5353616 -0.98837906 -0.332269250  0.085107228 -0.2998204858\n [20,] 1.7558901 -0.71597880 -0.818185046  0.180035941 -0.4017621731\n [21,] 1.9065017 -0.03354294 -1.682614408  0.097307995 -0.2876523029\n [22,] 1.8002959 -0.39359844 -1.195315025",
        "  0.072959514 -0.2843419466\n [23,] 1.6863803 -0.75237428 -0.720663157  0.062110971 -0.2754538548\n [24,] 1.7128942 -0.57193814 -0.902570007  0.042471261 -0.2808573396\n [25,] 1.6388117 -0.88981310 -0.529210138 -0.251843047  0.0320545904\n [26,] 1.8042815 -1.14870696 -0.418155690 -0.354231277  0.1168123881\n [27,] 1.3187259 -1.08961766 -0.020972492 -0.170975621 -0.0371600804\n [28,] 1.9365885 -0.06169118 -1.649523774 -0.225848354  0.0004747719\n [29,] 1.8816404  0.09334132 -1.743956851  0.232836759 -0.4638616106\n [30,]",
        " 1.7494832 -0.89932003 -0.640989638  0.020756887 -0.2299303912\n [31,] 1.9870397  0.13870063 -1.904786291 -0.427187097  0.2062331020\n [32,] 1.5321124 -1.34779486  0.032657684  0.438258757 -0.6552339719\n [33,] 1.9262273  0.19273995 -1.895836750  0.275031545 -0.4981620042\n [34,] 1.6240415 -1.12469770 -0.281715509 -0.220813047  0.0031847708\n [35,] 1.5816676 -0.65139760 -0.721807891 -0.044485283 -0.1639768050\n [36,] 1.4072846 -1.19903143  0.002774811 -0.009302368 -0.2017256446\n [37,] 1.7382660 -0.73300298 -0.811050701",
        " -0.191187334 -0.0030250080\n [38,] 1.3172840 -1.94668851  0.840809632 -0.309467509  0.0980624119\n [39,] 1.8731304 -0.13748065 -1.527243342 -0.194561597 -0.0138448339\n [40,] 1.6776953 -0.88028694 -0.574523060 -0.033196816 -0.1896884757\n [41,] 1.5227336 -1.20180293 -0.124599424 -0.112449209 -0.0838820082\n [42,] 1.6993891 -0.38889099 -1.096383251 -0.241120072  0.0270051806\n [43,] 1.8833474 -0.46245973 -1.195481794 -0.274497322  0.0490913998\n [44,] 1.7191454 -0.12654601 -1.387233906 -0.012703785 -0.1926616806\n [45,]",
        " 1.6597361 -0.24695129 -1.214479075  0.122568195 -0.3208739157\n [46,] 1.8336878 -0.40116987 -1.202186336  0.016463857 -0.2467954327\n [47,] 1.5900470 -0.79424721 -0.583032307 -0.227921826  0.0151543036\n [48,] 1.8697219 -0.61534092 -1.034021406 -0.334796296  0.1144367576\n [49,] 1.6540604 -0.54155570 -0.898491901 -0.560876644  0.3468638053\n [50,] 1.3237631 -1.55794971  0.425618498  0.128035550 -0.3194674553\n [51,] 1.5530189 -1.05177856 -0.296831192  0.606925445 -0.8113346309\n [52,] 1.5783286 -0.69856810 -0.666436465",
        " -0.294735657  0.0814116586\n [53,] 1.5054009 -0.62915396 -0.663930942  0.224328576 -0.4366445697\n [54,] 1.6361451 -0.84801408 -0.564026663 -0.419591359  0.1954869741\n [55,] 1.8992496  0.05715920 -1.729884149  0.505015827 -0.7315404422\n [56,] 1.7736199 -0.47175175 -1.073004543 -0.124789293 -0.1040742997\n [57,] 1.7005703 -0.50125894 -0.976573443 -0.335530680  0.1127928135\n [58,] 1.4845944 -1.60198297  0.336154484 -0.034931435 -0.1838344472\n [59,] 1.4888666 -1.64628659  0.397579210 -0.061301512 -0.1788576826\n [60,]",
        " 1.2831090 -1.57345895  0.524649885 -0.434810544  0.2005105635\n [61,] 1.8003168 -0.48052306 -1.098739886  0.107429878 -0.3284837697\n [62,] 1.3479168 -1.47894324  0.363892123  0.056333372 -0.2891990072\n [63,] 1.8042394 -0.44279804 -1.141121044 -0.140567684 -0.0797526638\n [64,] 1.5182179 -1.24890232 -0.051211798 -0.415433818  0.1973300046\n [65,] 1.6693431 -0.34177909 -1.106072498  0.189802761 -0.4112942382\n [66,] 1.5053307 -1.47625528  0.208769116 -0.153527636 -0.0843168748\n [67,] 1.5075552 -1.23138656 -0.045734756",
        " -0.162567093 -0.0678668200\n [68,] 1.4941051 -1.45067393  0.179710887  0.063783149 -0.2869252063\n [69,] 1.3442907 -1.48337052  0.340729764 -0.170489861 -0.0311600882\n [70,] 1.5613240 -0.85657935 -0.496968361 -0.457968984  0.2501927159\n [71,] 1.5433468 -0.81321719 -0.539328411  0.359079221 -0.5498804235\n [72,] 1.7298332  0.12602214 -1.637035338 -0.209945441 -0.0088745883\n [73,] 1.8755312 -0.37895953 -1.257101989 -0.165015229 -0.0744544908\n [74,] 1.9725083 -0.08282540 -1.681946117  0.149828215 -0.3575649834\n [75,]",
        " 1.4911868 -0.65912439 -0.601977170 -0.130076966 -0.1000082780\n [76,] 1.7390125 -0.42361538 -1.098207717 -0.343365967  0.1261765532\n [77,] 1.3565214 -1.58375847  0.438541758 -0.088627333 -0.1226773259\n [78,] 1.6877347 -0.27214248 -1.207664463 -0.016258872 -0.1916688903\n [79,] 1.6851052 -1.14007907 -0.306798084 -0.402392930  0.1641649032\n [80,] 1.8797180  0.04598043 -1.698511098 -0.172532226 -0.0546550713\n [81,] 1.7342844 -1.14079811 -0.363591156 -0.030590877 -0.1993042492\n [82,] 1.5268424 -1.15944173 -0.152866754",
        "  0.313424055 -0.5279580036\n [83,] 1.4868802 -0.88459557 -0.391216278  0.349796485 -0.5608648781\n [84,] 1.1809942 -1.95915752  0.976311702 -0.158201219 -0.0399471487\n [85,] 1.3142646 -1.71057636  0.612907095 -0.102946616 -0.1136487483\n [86,] 1.0466490 -1.78107478  0.908830077 -0.004723675 -0.1696806321\n [87,] 0.9982401 -1.67627503  0.825662213  0.035420308 -0.1830475773\n [88,] 1.8907122  0.19625744 -1.875382825 -0.138234012 -0.0733528168\n [89,] 1.5439844  0.31620965 -1.694347104 -0.062694759 -0.1031522216\n [90,]",
        " 1.4271167  0.36313225 -1.642401603 -0.146277805 -0.0015695006\n [91,] 1.0136597 -1.81899694  0.999566095 -0.075102030 -0.1191267956\n [92,] 1.3051011  0.35769858 -1.523915062 -0.002646487 -0.1362380986\n [93,] 0.7245344 -1.62331897  1.036128997 -0.091813434 -0.0455310010\n [94,] 1.4768411  0.31653371 -1.633409695 -0.190732392  0.0307672756\n [95,] 0.8767594 -1.72829509  1.008040387  0.049139365 -0.2056440587\n [96,] 1.1462695  0.44508849 -1.461360484  0.112846153 -0.2428436816\n [97,] 1.1303316 -1.88497053  0.945557729",
        " -0.170186424 -0.0207323342\n [98,] 1.3474330  0.45737556 -1.645664391  0.062064777 -0.2212089307\n [99,] 1.7051657  0.30314745 -1.820413940 -0.020442512 -0.1674566571\n[100,] 1.3424590  0.43127837 -1.625699351  0.242650629 -0.3906886872\n",
        "> ",
        "  y1 <- z1 %*% h",
        "> ",
        "y1",
        "            [,1]        [,2]         [,3]          [,4]\n  [1,] 1.6622000  1.19324944  0.409879926 -0.2120657411\n  [2,] 1.8634075  0.38400325 -0.180590481  0.5454224273\n  [3,] 1.9041126 -0.23285108 -0.015885689  0.3214342765\n  [4,] 1.9744906  0.40029315  0.324534217 -0.0750858841\n  [5,] 1.8039585  0.46235088  0.293041476 -0.0744808331\n  [6,] 1.4286858  1.75525260 -0.086339428  0.4196281373\n  [7,] 2.1308779 -0.20731540  0.140082940  0.1544888418\n  [8,] 1.8031759  0.68591172  0.354967853 -0.1313006124\n  [9,] 1.6802778",
        "  1.02486247  0.177565263  0.0875111205\n [10,] 1.5280968  1.04308863  0.120043475  0.1718404366\n [11,] 1.7801718  0.47634769  0.377768223 -0.1670746842\n [12,] 1.8652346  0.40741300 -0.223409434  0.6046006476\n [13,] 1.5967654  0.84426930  0.047852699  0.2505641641\n [14,] 1.7692311  0.39119138  0.114221904  0.1822464756\n [15,] 1.5219256  1.72543851  0.452143958 -0.2676914178\n [16,] 1.2930751  1.89554307  0.344424736 -0.1034508339\n [17,] 1.7423398  0.83522378  0.329919094 -0.0914190355\n [18,] 1.3537682  2.37006742",
        "  0.136316233  0.1614427499\n [19,] 1.7845541  0.49460138 -0.011722643  0.3352094937\n [20,] 1.7478752  1.09258729 -0.091908849  0.4491837649\n [21,] 1.3718187  2.13848111 -0.029323527  0.3216050516\n [22,] 1.5513176  1.55025246 -0.002163941  0.3179039608\n [23,] 1.7244599  0.96972537  0.007797107  0.3079667720\n [24,] 1.6156205  1.20273870  0.032034942  0.3140080517\n [25,] 1.7880077  0.73787566  0.281549939 -0.0358381215\n [26,] 2.0880782  0.60905989  0.375310215 -0.1306002202\n [27,] 1.7029560  0.11065700  0.208152833",
        "  0.0415462329\n [28,] 1.4129971  2.11225416  0.260650161 -0.0005308112\n [29,] 1.2645184  2.23021771 -0.134951418  0.5186130467\n [30,] 1.8729867  0.87044350  0.042407198  0.2570699924\n [31,] 1.3069731  2.42308133  0.433738802 -0.2305756176\n [32,] 2.0364020  0.04858243 -0.316907868  0.7325738511\n [33,] 1.2257606  2.41300897 -0.173772089  0.5569620526\n [34,] 1.9436521  0.43387600  0.254053580 -0.0035606819\n [35,] 1.5790155  0.96913480  0.098703206  0.1833316414\n [36,] 1.8429438  0.08275339  0.068974627  0.2255361271",
        "\n [37,] 1.7474511  1.07261704  0.221637362  0.0033820618\n [38,] 2.3079771 -0.94347152  0.329034119 -0.1096371096\n [39,] 1.4217167  1.95556502  0.228657040  0.0154789949\n [40,] 1.8087666  0.79463671  0.093090727  0.2120781631\n [41,] 1.9265382  0.23275439  0.154059812  0.0937829362\n [42,] 1.4766370  1.43020180  0.270625753 -0.0301927098\n [43,] 1.6587362  1.55618178  0.302790739 -0.0548858535\n [44,] 1.3051009  1.78284771  0.070285704  0.2154023072\n [45,] 1.3482316  1.56838499 -0.048901240  0.3587479439\n [46,] 1.5802830",
        "  1.56640402  0.052232880  0.2759256821\n [47,] 1.6859506  0.80092780  0.258806785 -0.0169430265\n [48,] 1.7572047  1.35637382  0.353554416 -0.1279441845\n [49,] 1.5525351  1.18779372  0.547513607 -0.3878055238\n [50,] 2.0376787 -0.44312232 -0.055620408  0.3571754733\n [51,] 1.8418700  0.44699218 -0.466605004  0.9070996936\n [52,] 1.6100091  0.90330380  0.316829901 -0.0910210014\n [53,] 1.5093582  0.89982366 -0.132983897  0.4881834700\n [54,] 1.7565658  0.78227899  0.428070139 -0.2185610814\n [55,] 1.3025546  2.21114503",
        " -0.371964512  0.8178870785\n [56,] 1.5877175  1.40758998  0.174137927  0.1163586045\n [57,] 1.5569284  1.28698567  0.354876976 -0.1261061991\n [58,] 2.1825398 -0.32239268  0.093403781  0.2055331602\n [59,] 2.2168881 -0.38888852  0.122416655  0.1999689683\n [60,] 2.0198986 -0.54690969  0.444193555 -0.2241776251\n [61,] 1.6127974  1.43592091 -0.029224241  0.3672560193\n [62,] 1.9988919 -0.35060801  0.018436388  0.3233343196\n [63,] 1.5888954  1.48752755  0.185336191  0.0891661888\n [64,] 1.9566495  0.15176190  0.422737387",
        " -0.2206216522\n [65,] 1.4220781  1.44508014 -0.100434931  0.4598409376\n [66,] 2.1082996 -0.15858929  0.201618630  0.0942691318\n [67,] 1.9367243  0.15008766  0.207307773  0.0758774114\n [68,] 2.0822732 -0.12900262  0.009177736  0.3207921329\n [69,] 1.9994584 -0.33498378  0.205859877  0.0348380376\n [70,] 1.7097158  0.69348376  0.456592616 -0.2797239601\n [71,] 1.6663424  0.73843397 -0.255892164  0.6147850032\n [72,] 1.1340657  2.09428354  0.244985986  0.0099220914\n [73,] 1.5941657  1.63739232  0.212036333  0.0832426513",
        "\n [74,] 1.4533404  2.14476306 -0.069786601  0.3997698047\n [75,] 1.5204996  0.83120036  0.179069845  0.1118126539\n [76,] 1.5292088  1.43369148  0.360060833 -0.1410696751\n [77,] 2.0790918 -0.45083700  0.137751923  0.1371574200\n [78,] 1.3858424  1.56396701  0.074104171  0.2142923339\n [79,] 1.9977069  0.47300557  0.417253008 -0.1835419415\n [80,] 1.2966483  2.17299158  0.215000614  0.0611062274\n [81,] 2.0329903  0.53916070  0.092857483  0.2228289247\n [82,] 1.8994898  0.27480589 -0.209502577  0.5902749927\n [83,] 1.6768866",
        "  0.56530844 -0.242002446  0.6270659968\n [84,] 2.2204226 -1.11483902  0.194206782  0.0446622700\n [85,] 2.1388856 -0.66223013  0.151680081  0.1270631634\n [86,] 1.9995027 -1.04188472  0.054437009  0.1897087139\n [87,] 1.8911678 -0.95095698  0.011941436  0.2046534130\n [88,] 1.1981605  2.38324546  0.180794022  0.0820109423\n [89,] 0.8681679  2.14284967  0.102171153  0.1153276898\n [90,] 0.7523506  2.07188135  0.169360136  0.0017547550\n [91,] 2.0029907 -1.14491986  0.121109299  0.1331878065\n [92,] 0.6699147  1.92310655",
        "  0.042384452  0.1523188248\n [93,] 1.6601830 -1.21292304  0.119160689  0.0509052066\n [94,] 0.8204612  2.06581563  0.211357049 -0.0343988598\n [95,] 1.8420517 -1.17069952  0.002623075  0.2299170472\n [96,] 0.4958099  1.84286503 -0.060200581  0.2715074900\n [97,] 2.1321406 -1.08012472  0.202499264  0.0231794543\n [98,] 0.6293656  2.08048935 -0.007808714  0.2473191032\n [99,] 0.9913766  2.30625215  0.071945553  0.1872222343\n[100,] 0.6443020  2.05150323 -0.167406702  0.4368032313\n",
        "> ",
        "mu=mood$mu",
        "Error: object 'mood' not found\n",
        "> ",
        "mu=mod$mu",
        "> ",
        "su=mod$su",
        "> ",
        "  lam <- min( a * z1 ) ^ (-2)",
        "> ",
        "  y2 <- lam * y1",
        "> ",
        "  p * down * exp( -0.5 * Rfast::mahala(y1, mu, su) ) + (1 - p) * down * lam^d * exp( -0.5 * Rfast::mahala(y2, mu, su) )",
        "Error: object 'p' not found\n",
        "> ",
        "p=mod$p",
        "> ",
        "  p * down * exp( -0.5 * Rfast::mahala(y1, mu, su) ) + (1 - p) * down * lam^d * exp( -0.5 * Rfast::mahala(y2, mu, su) )",
        "  [1] 3.675793e-03 4.010847e-03 2.820608e-03 3.658217e-03 4.662926e-03 4.706387e-03 4.963331e-03 8.237946e-03 1.315596e-02\n [10] 5.948340e-03 5.455667e-03 2.871692e-03 7.587766e-03 7.436850e-03 1.417020e-03 1.596216e-03 8.648629e-03 4.593954e-03\n [19] 1.128890e-02 4.228729e-03 1.058820e-04 7.688509e-03 1.102728e-02 1.744080e-03 1.154216e-02 1.215480e-04 6.741490e-04\n [28] 5.816654e-03 1.533350e-03 1.923058e-03 1.559916e-03 4.933895e-04 2.178902e-03 7.978520e-03 8.706235e-03 7.269628e-03\n [37] 3.194893e-04 2.459044e-03",
        " 3.758112e-03 1.096154e-02 2.126344e-03 7.729165e-03 3.586358e-03 3.654402e-03 1.589929e-03\n [46] 5.929445e-03 1.033355e-02 1.523525e-03 9.084743e-04 9.875534e-04 1.425056e-04 5.713327e-03 1.605825e-03 4.893998e-03\n [55] 2.542926e-04 9.391419e-03 6.654791e-03 4.575478e-03 3.768063e-04 9.754149e-05 7.696819e-03 5.473279e-04 1.140569e-02\n [64] 4.579777e-03 3.497620e-03 1.130814e-03 4.725025e-03 4.884790e-03 3.698724e-03 1.868118e-03 4.152766e-04 7.006639e-04\n [73] 2.113432e-03 8.554539e-04 3.676740e-04 6.520553e-03",
        " 7.543950e-03 5.958237e-03 8.109011e-04 6.060213e-03 1.040318e-03\n [82] 3.039617e-03 1.788587e-03 1.181423e-03 5.375756e-03 2.277173e-06 3.265002e-11 4.097619e-03 2.596381e-10 3.899839e-16\n [91] 2.151047e-05 4.451754e-20 1.950580e-18 9.073386e-13 5.429867e-11 4.751597e-27 2.406608e-04 4.654072e-16 1.333789e-05\n[100] 1.955015e-17\n",
        "> ",
        "ddir",
        "Error: object 'ddir' not found\n",
        "> ",
        "ddiri",
        "function(x, a, logged = TRUE) {\n  ## x is the compositional data\n  ## a is a vector with the parameters\n  if ( is.null(dim(x)[1]) ) {\n    f <- lgamma( sum(a) ) - sum( lgamma(a) ) + sum( log(x) * (a - 1) )\n  } else  f <- lgamma( sum(a) ) - sum( lgamma(a) ) + as.vector( log(x) %*% (a - 1) )\n\n  if ( logged ) {\n    f <- f\n  } else   f <- exp(f)\n\n  f\n}\n<bytecode: 0x2715dac8>\n<environment: namespace:Compositional>\n",
        "> ",
        "dfd",
        "function(x, alpha, prob, tau){\n  FlexDir::FD.density(x = x, a = alpha, p = prob, t = tau)\n}\n<bytecode: 0x2706e630>\n<environment: namespace:Compositional>\n",
        "> ",
        "Compositional::dmixdiri",
        "function(x, a, prob, logged = TRUE) {\n  g <- dim(a)[1]\n  f <- 0\n  for (i in 1:g)  f <- f + prob[i] * Compositional::ddiri(x, a[i, ], logged = FALSE)\n\n  if ( logged )  f <- log(f)\n  f\n}\n<bytecode: 0x25312ac0>\n<environment: namespace:Compositional>\n",
        "> ",
        "Compositional::dmix.compnorm",
        "function(x, mu, sigma, prob, type = \"alr\", logged = TRUE) {\n\n  if ( is.null(dim(x)[1]) )  x <- matrix(x, nrow = 1)\n  g <- dim(mu)[1]\n\n  if (type == \"alr\") {\n    y <- Compositional::alr(x) # additive log-ratio transformation\n  } else y <- Compositional::alfa(x, 0)$aff\n\n  f <- 0\n  for (i in 1:g)  f <- f + prob[i] * Rfast::dmvnorm(y, mu[i, ], sigma[, , i])\n\n  if ( logged )  f <- log(f)\n  f\n\n}\n<bytecode: 0x25350ee8>\n<environment: namespace:Compositional>\n\nRestarting R session...\n\n",
        "> ",
        "library(Compositional)",
        "\nRestarting R session...\n\n"
    ]
}