colnames(x) <- nam
}
mod <- model$mod
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
x <- as.data.frame(x)
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
mod
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
est[, i] <- predict(mod, newdata = X)
}
nam <- colnames(x)[k]
if ( is.null(nam) )  nam <- paste("Variable ", k, sep = "")
est <- est[-1, ] - est[1, ]
plot( xsel, est[1, ], type = "l", xlab = nam, ylab = "Centered fitted values",
cex.lab = 1.3, cex.axis = 1.3, ylim = c( min(est), max(est) ) )
abline(v = seq( min(xsel), max(xsel), length = 10 ), col = "lightgrey", lty = 2)
abline(h = seq(min(est), max(est), length = 10), col = "lightgrey", lty = 2)
for (i in 2:c(n - 1) )  lines(xsel, est[i, ])
m <- Rfast::colmeans(est)
lines(xsel, m, col = 4, lwd = 3)
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.pprcomp.R')
library(Compositional)
x <- as.matrix( iris[, 2:4] )
x <- x/ rowSums(x)
y <- iris[, 1]
model <- pprcomp(y, x)
ice <- ice.pprcomp(model, x, k = 1)
x <- as.matrix( iris[, 2:4] )
x <- x/ rowSums(x)
y <- iris[, 1]
model <- pprcomp(y, x)
ice <- ice.pprcomp(model, x, k = 1,frac=0.5)
x <- as.matrix( iris[, 2:4] )
x <- x/ rowSums(x)
y <- iris[, 1]
model <- pprcomp(y, x)
ice <- ice.pprcomp(model, x, k = 1,frac=1)
x <- as.matrix( iris[, 2:4] )
x <- x/ rowSums(x)
y <- iris[, 1]
model <- pprcomp(y, x)
ice <- ice.pprcomp(model, x, k = 1,frac=1)
x <- as.matrix( iris[, 2:4] )
x <- x/ rowSums(x)
y <- iris[, 1]
model <- pprcomp(y, x)
ice <- ice.pprcomp(model, x, k = 1,frac=1)
library(Compositional)
library(Compositional)
library(Compositional)
library(Compositional)
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.kernreg.R')
?kern.reg
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
h=0.1
type="gauss"
k=1
frac=0.1
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ## standardize the independent variables
if  ( type == "gauss" )  h <- h^2
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(xnew, x, square = TRUE)/h^2
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
}
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h^2
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
}
est
i=1
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h^2
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx
z1
a1
X
x
X
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ## standardize the independent variables
if  ( type == "gauss" )  h <- h^2
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
i
nu
X=x
X
s
m
X
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )
X
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h^2
a1
a1
dista(X, x, square = TRUE)
Rfast::dista(X, x, square = TRUE)
h
h
0.1^
2
h=0.1
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ## standardize the independent variables
if  ( type == "gauss" )  h <- h^2
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
h
i=1
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h
z <- exp(-a1)
}
z
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
mhx
y
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
}
est
nam <- colnames(x)[k]
if ( is.null(nam) )  nam <- paste("Variable ", k, sep = "")
est <- est[-1, ] - est[1, ]
plot( xsel, est[1, ], type = "l", xlab = nam, ylab = "Centered fitted values",
cex.lab = 1.3, cex.axis = 1.3, ylim = c( min(est), max(est) ) )
abline(v = seq( min(xsel), max(xsel), length = 10 ), col = "lightgrey", lty = 2)
abline(h = seq(min(est), max(est), length = 10), col = "lightgrey", lty = 2)
for (i in 2:c(n - 1) )  lines(xsel, est[i, ])
m <- Rfast::colmeans(est)
lines(xsel, m, col = 4, lwd = 3)
cor(y,x[,1])
cor(y,x[,2])
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
k=2
h
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ## st
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
}
nam <- colnames(x)[k]
if ( is.null(nam) )  nam <- paste("Variable ", k, sep = "")
est <- est[-1, ] - est[1, ]
plot( xsel, est[1, ], type = "l", xlab = nam, ylab = "Centered fitted values",
cex.lab = 1.3, cex.axis = 1.3, ylim = c( min(est), max(est) ) )
abline(v = seq( min(xsel), max(xsel), length = 10 ), col = "lightgrey", lty = 2)
abline(h = seq(min(est), max(est), length = 10), col = "lightgrey", lty = 2)
for (i in 2:c(n - 1) )  lines(xsel, est[i, ])
m <- Rfast::colmeans(est)
lines(xsel, m, col = 4, lwd = 3)
est
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
k=2
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ## standardize the independent variables
if  ( type == "gauss" )  h <- h^2
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
h
h=0.01
h
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h
a1
a1
h
Rfast::dista(X, x, square = TRUE)
X
x
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ##
x
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
i
i=1
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )
X
x
X
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h
a1
z <- exp(-a1)
z
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.kernreg.R')
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
ice.kernreg(y,x,h=0.1,k=2)
h
ice.kernreg(y,x,h=0.1,k=2)
ice.kernreg(y,x,h=0.1,k=1)
type
h
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.kernreg.R')
h=0.1
k=2
x
X
x <- as.matrix(x)
dm <- dim(x)
n <- dm[1]  ;  p <- dm[2]
m <- Rfast::colmeans(x)
s <- Rfast::colVars(x, std = TRUE)
x <- t( ( t(x) - m ) / s )  ## standardize the independent variables
if  ( type == "gauss" )  h <- h^2
nu <- ceiling( frac * n )
xsel <- sort( sample(x[, k], nu) )
est <- matrix(NA, n, nu)
if (type == "gauss") {
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- 0.5 * Rfast::dista(X, x, square = TRUE)/h
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
}
} else {
for ( i in 1:nu ) {
X <- x
X[, k] <- xsel[i]
X <- t( ( t(X) - m ) / s )  ## standardize the x values
a1 <- Rfast::dista(X, x, type = "manhattan" )/h
z <- exp(-a1)
ta <- Rfast::rowsums(z)
mhx <- ( z %*% y) / ta
mhx[ is.na(mhx) ] <- 0
est[, i] <- mhx
}
}
nam <- colnames(x)[k]
if ( is.null(nam) )  nam <- paste("Variable ", k, sep = "")
est <- est[-1, ] - est[1, ]
plot( xsel, est[1, ], type = "l", xlab = nam, ylab = "Centered fitted values",
cex.lab = 1.3, cex.axis = 1.3, ylim = c( min(est), max(est) ) )
abline(v = seq( min(xsel), max(xsel), length = 10 ), col = "lightgrey", lty = 2)
abline(h = seq(min(est), max(est), length = 10), col = "lightgrey", lty = 2)
for (i in 2:c(n - 1) )  lines(xsel, est[i, ])
m <- Rfast::colmeans(est)
lines(xsel, m, col = 4, lwd = 3)
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.kernreg.R')
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
ice.kernreg(x,0.1,k=2)
ice.kernreg(x,0.1,k=1)
ice.kernreg(x,0.1,k=3)
ice.kernreg(x,0.1,k=4)
ice.kernreg(x,0.1,k=3)
ice.kernreg(x,0.1,k=2)
ice.kernreg(x,0.1,k=1)
plot(x[,1],y)
plot(x[,2],y)
plot(x[,3],y)
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.kernreg.R')
x
y
ice.kernreg(x,h=0.1,k=2,frac=0.4)
ice.kernreg(x,h=0.1,k=3,frac=0.4)
ice.kernreg(x,h=0.1,k=1,frac=0.4)
ice.kernreg(x,h=0.1,k=1,frac=0.9)
ice.kernreg(x,h=0.2,k=1,frac=0.9)
ice.kernreg(x,h=0.3,k=2,frac=0.9)
ice.kernreg(x,h=0.3,k=3,frac=0.9)
kern.reg
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/ice.kernreg.R')
y <- iris[, 1]
x <- iris[, 2:4]
est <- kern.reg(x, y, x, h = c(0.1, 0.2) )
h=0.1
ice.kernreg(y,x,h=0.2,k=2,frac=0.2)
ice.kernreg(y,x,h=0.2,k=2,frac=0.3)
ice.kernreg(y,x,h=0.2,k=3,frac=0.3)
ice.kernreg(y,x,h=0.2,k=1,frac=0.3)
ice.kernreg(y,x,h=0.2,k=3,frac=0.3)
cor(y,x)
ice.kernreg(y,x,h=0.1,k=3,frac=0.3)
ice.kernreg(y,x,h=0.5,k=3,frac=0.3)
ice.kernreg(y,x,h=0.5,k=2,frac=0.3)
ice.kernreg(y,x,h=0.5,k=1,frac=0.3)
ice.kernreg(y,x,h=0.5,k=2,frac=0.3)
ice.kernreg(y,x,h=0.5,k=3,frac=0.3)
plot(x[,1],y)
plot(x[,2],y)
plot(x[,3],y)
ice.kernreg(y,x,h=0.5,k=3,frac=0.3)
ice.kernreg(y,x,h=0.5,k=1,frac=0.3)
ice.kernreg(y,x,h=0.5,k=1,frac=0.7)
ice.kernreg(y,x,h=0.5,k=2,frac=0.7)
ice.kernreg(y,x,h=0.5,k=3,frac=0.7)
library(Compositional)
library(Compositional)
library(Compositional)
library(Compositional)
Rfast::knn
library(Compositional)
x <- as.matrix( iris[, 1:4] )
x <- x/ rowSums(x)
ina <- iris[, 5]
mod=comp.knn(x,x,ina,apostasi="ESOV")
mod
type = "S"
mesos = TRUE
n <- dim(x)[1]
p <- dim(x)[2]
ina <- as.numeric(ina)
xnew <- as.matrix(xnew)
xnew <- matrix(xnew, ncol = p ) ## makes sure xnew is a matrix
nc <- max(ina)  ## The number of groups
nu <- dim(xnew)[1]
xnew=x
n <- dim(x)[1]
p <- dim(x)[2]
ina <- as.numeric(ina)
xnew <- as.matrix(xnew)
xnew <- matrix(xnew, ncol = p ) ## makes sure xnew is a matrix
nc <- max(ina)  ## The number of groups
nu <- dim(xnew)[1]
?dista
Dist
?Dist
Dist
library(Rfast)
x
a=Dist(x,method="kullback_leibler")
b=Dist(x,method="jensen_shannon")
a[1:3,1:3]
b[1:3,1:3]
library(Compositional)
alef
rfolded
dfd
?dfd
?rfolded
?dfd
s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,
1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,
0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,
0.0611442781)
s <- matrix(s, ncol = 4)
m <- c(1.715, 0.914, 0.115, 0.167)
x <- rfolded(100, m, s, 0.5)
mod <- a.est(x)
mod
a.est
alpha.mle(x)
alpha.mle
a.est(x)
s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,
1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,
0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,
0.0611442781)
s <- matrix(s, ncol = 4)
m <- c(1.715, 0.914, 0.115, 0.167)
x <- rfolded(100, m, s, 0.5)
mod <- a.est(x)
den <- dfolded(x, mod$best, mod$p, mod$mu, mod$su)
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/dfolded.R')
s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,
1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,
0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,
0.0611442781)
s <- matrix(s, ncol = 4)
m <- c(1.715, 0.914, 0.115, 0.167)
x <- rfolded(100, m, s, 0.5)
mod <- a.est(x)
den <- dfolded(x, mod$best, mod$p, mod$mu, mod$su)
source('C:/Users/Michail/Desktop/Folder/paketo/Compositional/R/dfolded.R')
s <-  c(0.1490676523, -0.4580818209,  0.0020395316, -0.0047446076, -0.4580818209,
1.5227259250,  0.0002596411,  0.0074836251,  0.0020395316,  0.0002596411,
0.0365384838, -0.0471448849, -0.0047446076,  0.0074836251, -0.0471448849,
0.0611442781)
s <- matrix(s, ncol = 4)
m <- c(1.715, 0.914, 0.115, 0.167)
x <- rfolded(100, m, s, 0.5)
mod <- a.est(x)
den <- dfolded(x, mod$best, mod$p, mod$mu, mod$su)
mu
mod$mu
mod$su
d <- dim(x)[2] - 1
h <- t( helm(d + 1) )
down <- sqrt( det( 2 * pi * s) )
z1 <- Compositional::alef(x, a)$aff
z1
a=mod$a
a
mod$besrt
mod$best
a=mod$best
d <- dim(x)[2] - 1
h <- t( helm(d + 1) )
down <- sqrt( det( 2 * pi * s) )
z1 <- Compositional::alef(x, a)$aff
z1
y1 <- z1 %*% h
y1
mu=mood$mu
mu=mod$mu
su=mod$su
lam <- min( a * z1 ) ^ (-2)
y2 <- lam * y1
p * down * exp( -0.5 * Rfast::mahala(y1, mu, su) ) + (1 - p) * down * lam^d * exp( -0.5 * Rfast::mahala(y2, mu, su) )
p=mod$p
p * down * exp( -0.5 * Rfast::mahala(y1, mu, su) ) + (1 - p) * down * lam^d * exp( -0.5 * Rfast::mahala(y2, mu, su) )
ddir
ddiri
dfd
Compositional::dmixdiri
Compositional::dmix.compnorm
library(Compositional)
